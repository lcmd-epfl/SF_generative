# REINVENT4 TOML input example for reinforcement/curriculum learning
#
#
# Curriculum learning in REINVENT4 is a multi-stage reinforcement learning
# run.  One or more stages (auto CL) can be defined.  But it is also
# possible to continue a run from any checkpoint file that is generated
# during the run (manual CL).  Currently checkpoints are written at the end
# of a run also when the run is forcefully terminated with Ctrl-C.


run_type = "staged_learning"
device = "cuda:0"  # set torch device e.g. "cpu"
tb_logdir = "tb_logs"  # name of the TensorBoard logging directory
json_out_config = "_staged_learning.json"  # write this TOML to JSON

[parameters]

# Uncomment one of the comment blocks below.  Each generator needs a model
# file and possibly a SMILES file with seed structures.  If the run is to
# be continued after termination, the agent_file would have to be replaced
# with the checkpoint file.

summary_csv_prefix = "staged_learning"  # prefix for the CSV file
use_checkpoint = false  # if true read diversity filter from agent_file
purge_memories = false  # if true purge all diversity filter memories after each stage

## Reinvent
prior_file = "../model/formed_full.prior"
agent_file = "../model/formed_full.prior"


batch_size = 64          # network
unique_sequences = true  # if true remove all duplicates raw sequences in each step
                         # only here for backward compatibility
randomize_smiles = true  # if true shuffle atoms in SMILES randomly


[learning_strategy]

type = "dap"      # dap: only one supported
sigma = 256       # sigma of the RL reward function
rate = 0.0001     # for torch.optim


[diversity_filter]  # optional, comment section out or remove if unneeded
                    # NOTE: also memorizes all seen SMILES
type = "IdenticalTopologicalScaffold" # IdenticalTopologicalScaffold,
                                 # ScaffoldSimilarity, PenalizeSameSmiles
bucket_size = 30                 # memory size in number of compounds
minscore = 0.8                   # only memorize if this threshold is exceeded
minsimilarity = 0.8              # minimum similarity for ScaffoldSimilarity
penalty_multiplier = 0.5         # penalty factor for PenalizeSameSmiles


# Reinvent only: guide RL in the initial phase
[inception]  # optional, comment sectionout or remove if unneeded

memory_size = 200  # number of total SMILES held in memory
sample_size = 10  # number of SMILES randomly chosen each epoch


#----------------------RL stages here-----------------------------------------
### Stage 1
### Stage 1: Physical: SAS + MW + Unwanted SMARTS
[[stage]]

chkpt_file = 'formed_phys.chkpt'  # name of the checkpoint file, can be reused as agent

termination = "simple"  # termination criterion fot this stage
max_score = 0.65  # terminate if this total score is exceeded
min_steps = 1  # run for at least this number of steps
max_steps = 20  # terminate entire run when exceeded

[stage.scoring]
type = "geometric_mean"  # aggregation function

[[stage.scoring.component]]
# Custom alerts if used in a custom_product filter out unwanted groups

[stage.scoring.component.custom_alerts]

[[stage.scoring.component.custom_alerts.endpoint]]
name = "Unwanted SMARTS"  # user chosen name for output
weight = 1  # weight to fine-tune the relevance of this component

# parameters for the component:
# a list of unwanted SMARTS(!) to be scored as zero
params.filename = "a"
params.smarts = [
    "[*;r8]",
    "[*;r9]",
    "[*;r10]",
    "[*;r11]",
    "[*;r12]",
    "[*;r13]",
    "[*;r14]",
    "[*;r15]",
    "[*;r16]",
    "[*;r17]",
    "[C;!R]=[C;!R]~[C;!R]=[C;!R]~[C;!R]=[C;!R]", #!! ( ๑‾̀◡‾́)σ"
    "[C;!R]=[C;!R]~[C;!R]=[C;!R]~[C;!R]", #!! ( ๑‾̀◡‾́)σ"
    "[*;r]-[C;!R]=[C;!R][*;r]",
    "[*;r]-[C;!R]=[C;!R]~[C;!R]=[C;!R][*;r]",
    "[7][5](F)(F)[7]",
    "[7][7]",
    
]

[[stage.scoring.component]]
[stage.scoring.component.ForceNeutral]
[[stage.scoring.component.ForceNeutral.endpoint]]
name = "neutral_mol"
weight = 0.5

[[stage.scoring.component]]
[stage.scoring.component.CustomAlertsWanted]
[[stage.scoring.component.CustomAlertsWanted.endpoint]]
name = "Wanted SMARTS"  # user chosen name for output
weight = 3  # weight to fine-tune the relevance of this component
params.filename = "a"
params.smarts = [
    "[#6;R]1(=O)[#8,#7,#16;R][#6;R][#6;R][#6;R][#6;R]1",
]
